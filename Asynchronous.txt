하이라이트
javascript는 동기식 단일 blocking 스레드로 프로그램을 진행한다.
하지만 웹 브라우저는 다양한 종류의 이벤트를 사용한다.
web api의 경우 response를 기다리게 되면 스레드가 너무 느리게 진행될 수 있다.
때문에 메인 스레드를 중지하거나 차단하지 않고 코드에서 동시에 여러 개의 작업을 수행한다.
Main thread: Task A                   Task B
    Promise:      |__async operation__|
non-blocking : addEventListener, fetch등이 있다.
만약 모든 코드가 blocking된다면 web api를 이용하기 위해 기다리는 시간이 매우 길어질 것이다.


https://velog.io/@zayong/%EB%B9%84%EB%8F%99%EA%B8%B0%EC%B2%98%EB%A6%AC
*비동기 처리
특정 로직의 실행이 끝날때까지 기다려주지 않고 나머지 코드를 먼저 실행하는것을 비동기 처리라고 한다.

// #1
console.log('Hello');
// #2
setTimeout(function() {
	console.log('Bye');
}, 3000);
// #3
console.log('Hello Again');

#setTimeout은 비동기로 처리되기 때문에 hello again이 먼저 출려된다.

+

https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts
*비동기 프로그래밍
: 단일 스레드인 javascript가 여러 개의 프로세스 코어를 사용해 컴퓨터 처리 능력을 활용하고(setTimeout)
: web api에 의존적인 코드가 정확한 시점에 실행될 수 있도록 한다.

전제 : 일반적으로 프로그램의 코드는 한 번에 한 가지만 실행된다.
여러 프로세스 코어를 사용할 수 있는 시대에 컴퓨터 처리 능력을 제대로 활용하지 못하는 것이다.

-차단 코드
코드는 소스에 나타나는 순서대로 실행되며 이전 작업의 실행이 완료될 때따지 나중 작업은 실행되지 않는다.
이벤트 리스너를 사용해도 마찬가지이다.
앞서 실행한 function이 끝나기 전까지 뒤에 실행된 이벤트function은 실행되지 않는다.
이런 현상이 발생하는 이유는 javascript가 단일 스레드이기 때문이다.
스레드는 한 번에 하나의 작업만 실행한다.
단일 스레드는 그런 스레드 하나가 프로그램을 실행하는 것이기 때문에 하나의 작업만 실행할 수 있다.
Task A --> Task B --> Task C
컴퓨터에는 여러개의 코어가 있기 때문에 여러 작업을 수행할 수 있다.
Thread 1: Task A --> Task B
Thread 2: Task C --> Task D
javascript는 코어가 여러개 있어도 메인 스레드라고 하는 단일 스레드에서만 작업을 수행한다.
이러한 문제를 해결하기 위해 web worker를 사용하기 시작했다.
javascript는 처리 중 일부를 해당 worker 스레드로 보내 여러 작업을 처리한다.
Main thread: Task A --> Task C
Worker thread: Expensive task B

-비동기 코드
web worker는 유용하지만 한계가 있다.
dom(xml, html 접근을 위한 인터페이스)에 액세스할 수 없다는 것이다. 
worker는 ui를 업데이트하기 위해 직접적으로 아무것도 할 수 없다.
작업자는 내부에 100만개의 파란색 원을 렌더링할 수 없다.
기본적으로 숫자 처리만 가능하다.
앞선 함수의 반환값이 필요한 함수를 미리 실행할 경우 오류가 발생한다.
Main thread: Task A --> Task B
=a에서 이미지를 가져와 즉시 b를 수행할 경우 오류가 발생할 수 있다.

Main thread: Task A --> Task B --> |Task D|
Worker thread: Task C -----------> |      |
=d가 c,b에 의존한다고 했을 때 c가 d 실행전에 반환값을 줄 거라는 보장이 없다.

이런 문제를 해결하기 위해 promises를 사용할 수 있다.
작업이 다른 곳에서 발생하기 때문에 비동기 작업이 처리되는 동안 메인스레드가 차단되지 않는다.
Main thread: Task A                   Task B
    Promise:      |__async operation__|

비동기식 프로그래밍이 웹앱에서 특히 중요한 이유는 web api기능 때문이다.
파일 가져오기, 데이터 베이스 액세스는 즉시 반환되지 않는다.
때문에 의존하는 코드에서 에러가 발생한다.

https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing
-동기 자바스크립트
자바 스크립트는 단일 스레드이기 때문에 각 작업이 처리되는 동안 아무 일도 일어나지 않으며 렌더링이 일시 중지된다.
-비동기 자바스크립트
web api 기능은 비동기 코드를 사용하여 실행함.
비동기 콜백 : 백그라운드 코드 실행 완료후 호출되는 함수
구식이긴 하지만 여전히 많이 사용된다.

btn.addEventListener('click', () => {
  alert('You clicked me!');

  let pElem = document.createElement('p');
  pElem.textContent = 'This is a newly-added paragraph.';
  document.body.appendChild(pElem);
});

위의 코드가 대표적인 예이다.
콜백함수는 즉시 실행되지 않는다.
모든 콜백함수가 비동기식은 아니다. foreach같은 경우에는 동기식으로 실행된다.

- Promise : 미래의 어느 시점에서 반환될 것이라는 약속, 중간 상태를 나타내는 객체이다.
기본적으로 Promise는 작업의 중간 상태를 나타내는 객체입니다. 
사실상 어떤 종류의 결과가 미래의 어느 시점에서 반환될 것이라는 약속 입니다. 
작업이 언제 완료되고 결과가 반환되는지 정확히 보장할 수는 없지만 결과를 사용할 수 있거나 
약속이 실패할 때 제공한 코드가 다른 작업을 수행하기 위해 실행된다는 보장은 있습니다. 
성공적인 결과를 얻거나 실패 사례를 정상적으로 처리합니다.

이전 스타일의 콜백 문제 = 콜백 지옥
chooseToppings(function(toppings) {
  placeOrder(toppings, function(order) {
    collectOrder(order, function(pizza) {
      eatPizza(pizza);
    }, failureCallback);
  }, failureCallback);
}, failureCallback);

promise를 통한 개선
chooseToppings()
.then(toppings => placeOrder(toppings))
.then(order => collectOrder(order))
.then(pizza => eatPizza(pizza))
.catch(failureCallback);
catch함수는 앞의 모든 promise 구문의 오류를 한 번에 처리한다.

-promise와 이벤트 리스너의 차이점
promise는 한 번만 성공하거나 실패할 수 있다. 두 번의 시도는 없다.
promise가 성공할거나 실패하고 나중에 성공/실패 콜백을 추가하면 이벤트가 더 일찍 발생했더라도 올바른 콜백이 호출됨.

-기본 promise 구문 설명
최신 web api는 긴 작업을 수행할는 기능에 사용하기 때문에 promise를 이해하는 것이 중요하다.

-promise.all
Promise.all([a, b, c]).then(values => {
  ...
});
a,b,c를 모두 시행하고 반환이되면 .then을 수행한다.
페이지에 동시에 렌더링할 요소들이 있는 경우 쓰인다.
여러 개의 web api요청을 한번에 처리해야 하는 경우 사용할 수도 있다.

-finally
promise가 fullfills/rejects되는 것과 무관하게 항상 실행하고 싶은 코드는 .finally()에 포함시키면 된다.

async then()/catch()/finally() = sync try/catch/finally

#async await
async await 구문을 사용하면 코드를 sync와 유사하게 바꿔준다. 동작도 좀더 동기적으로 바꿔준다.
await는 block기능을 수행한다.
대기 속도 처리